{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "The Website contains all of my homework from the Infovis SS2021 seminar in chronological order. However my contributions are not the sole viable solution and should only be seen as a possible jump start for your own procedure.",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2021-06-15T21:02:37+02:00"
    },
    {
      "path": "exercise_01_RJ.html",
      "title": "Homework 01",
      "author": [],
      "contents": "\r\nread data\r\n\r\nShow code\r\ndat <- read_rds(\"../InfovisSS2021/datasets/lincoln_temps.rds\")\r\n\r\n\r\n\r\nVisualisation of temperatures in Lincoln (Nebraska)\r\n1. Ridgeline-Plot\r\n\r\nShow code\r\n#Ridgeline-Plot\r\n\r\ndat %>%\r\n  ggplot(aes(x = mean_temp, y = month_long)) +\r\n  geom_density_ridges(bandwidth = 1,\r\n                      color = \"dark blue\",\r\n                      fill = \"light blue\") +\r\n  labs(\r\n    title = \"The month july has the highest mean temperature\",\r\n    subtitle = \"Temperatures in Lincoln (Nebraska)\",\r\n    caption = \"Temperature is measured in F°\",\r\n    x = \"Mean temperature per month\",\r\n    y = NULL\r\n  )\r\n\r\n\r\n\r\n\r\n2. Violin-Plot\r\n\r\nShow code\r\n#Violin-Plot\r\n\r\ndat %>%\r\n  ggplot(aes(x = month, y = mean_temp)) +\r\n  geom_violin(color = \"dark blue\", fill = \"light blue\") +\r\n  labs(\r\n    title = \"The month july has the highest mean temperature\",\r\n    subtitle = \"Temperatures in Lincoln (Nebraska)\",\r\n    caption = \"Temperature is measured in F°\",\r\n    x = NULL,\r\n    y = \"Mean temperature per month\"\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-06-15T21:02:41+02:00"
    },
    {
      "path": "exercise_02_RJ.html",
      "title": "Homework 02",
      "author": [],
      "contents": "\r\nRead data\r\nTemperature changes throughout the years\r\nVisualisation 1\r\n\r\nShow code\r\ndat_refined%>%\r\n  filter(year>=2000)%>%\r\n  ggplot(aes(x=as.factor(year),y=Mean))+\r\n  geom_violin(fill=\"light blue\",color=NA)+\r\n  geom_sina(size=0.75) +\r\n  labs(title=\"Mean temperature changes are increasing with their maximum difference in 2016\",subtitle=\"Mean temperature change in violin and sina plot\",caption=\"Temperature is measured in F°\",x=\"Year\",y=\"Mean temperature change\")\r\n\r\n\r\n\r\n\r\nVisualisation 2\r\n\r\nShow code\r\ndat_refined%>%\r\n  filter(year>=2000)%>%\r\n  ggplot(aes(y=as.factor(year),x=Mean))+\r\n  geom_boxplot(fill=\"light blue\",color=\"dark blue\")+\r\n  labs(title=\"Mean temperature changes are increasing with their maximum difference in 2016\",subtitle=\"Mean temperature change in violin and sina plot\",caption=\"Temperature is measured in F°\",y=\"Year\",x=\"Mean temperature change\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-06-15T21:02:43+02:00"
    },
    {
      "path": "exercise_03_RJ.html",
      "title": "Homework 03",
      "author": [],
      "contents": "\r\nAdapt Data\r\n\r\nShow code\r\ngapminder %>%  \r\n    filter(country %in% c(\"Germany\", \"France\", \"Spain\", \"Netherlands\", \"Belgium\", \"Portugal\", \"Luxemburg\", \"Poland\")) %>% \r\n  # for each year we assign a rank\r\n  group_by(year) %>%  \r\n  arrange(year, -gdpPercap) %>%  # this is the variable we want to use for our race\r\n  # assign ranking\r\n  mutate(rank = 1:n()) %>% \r\n  filter(rank <= 10) -> # how many positions on the race?\r\n  ranked_by_year\r\n\r\n\r\n\r\nAdapt visualisation\r\n\r\nShow code\r\nranked_by_year %>%  \r\n  ggplot() +  \r\n  aes(xmin = 0 ,  \r\n      xmax = gdpPercap) +  \r\n  aes(ymin = rank - .45,  \r\n      ymax = rank + .45,  \r\n      y = rank) +  \r\n  facet_wrap(~ year) +  \r\n  geom_rect(alpha = .7) +\r\n  aes(fill = continent) +\r\n  scale_x_continuous(  \r\n    limits = c(-300000, NA),\r\n    breaks = c(0, 100000)\r\n   ) +  \r\n  geom_text(col = \"gray13\",\r\n            hjust = \"right\",\r\n            aes(label = country),\r\n            x = -50) +\r\n  scale_y_reverse() +\r\n  labs(fill = NULL, y = \"\") +\r\n  theme(axis.ticks.y = element_blank(), \r\n        axis.text.y = element_blank()) +\r\n  facet_null() +\r\n  scale_x_continuous(  \r\n    limits = c(-50000, NA),\r\n    breaks = c(0, 100000)\r\n   ) +\r\n  geom_text(x = 80000 , y = -10,\r\n            #family = \"Times\",\r\n            aes(label = as.character(year)),\r\n            size = 20, col = \"grey18\") +\r\n  aes(group = country) +\r\n  gganimate::transition_time(year) -> anim\r\n\r\n\r\n\r\nBar-chart races\r\nVisualisation 1: GDP per capita per country\r\n\r\nShow code\r\ngapminder %>% \r\n  filter(country %in% c(\"Germany\", \"France\", \"Spain\", \"Netherlands\", \"Belgium\")) %>% \r\n  ggplot() +\r\n  aes(x = fct_reorder(country, gdpPercap) , y = gdpPercap, fill = country) +\r\n  labs(x=NULL,y= \"GDP per capita\") +\r\n  coord_flip() +\r\n  geom_col() +\r\n  guides(fill = FALSE) + \r\n  gganimate::transition_time(year) +\r\n  NULL -> anim\r\n\r\n\r\nanimate(\r\n  anim, fps = 60,\r\n  nframes = 240,\r\n  end_pause = 10\r\n)\r\n\r\n\r\n\r\n\r\nVisualisation 2: Ranking of goals scored by “Bundesliga” teams\r\n\r\nShow code\r\nlibrary(jsonlite)\r\nraw <- read_json(\"https://www.openligadb.de/api/getmatchdata/bl1/2020\")\r\n\r\n\r\n\r\nresults <- data.frame()\r\nfor(i in 1:length(raw)){\r\n  if(as.Date(raw[[i]]$MatchDateTime) >= today()) {\r\n    next;\r\n  }\r\n  date <- raw[[i]]$MatchDateTime\r\n  p1 <- raw[[i]]$Team1$TeamName\r\n  p2 <- raw[[i]]$Team2$TeamName\r\n  #raw[[i]]$MatchResults\r\n  g1 <- raw[[i]]$MatchResults[[1]]$PointsTeam1\r\n  g2 <- raw[[i]]$MatchResults[[1]]$PointsTeam2\r\n  \r\n  match_count <- raw[[i]]$Group$GroupOrderID\r\n  \r\n  row <- data.frame(datum = date, team1 = p1, team2 = p2, goals1 = g1, goals2 = g2, match_count = match_count)\r\n  results <- bind_rows(results, row)  \r\n}\r\n\r\n\r\npoint_t1 <- function(g1, g2) {\r\n  if(g1 == g2) return (1)\r\n  if(g1 > g2) return (3)\r\n  if(g1 < g2) return (0)\r\n}\r\n\r\npoint_t2 <- function(g1, g2) {\r\n  if(g1 == g2) return (1)\r\n  if(g1 > g2) return (0)\r\n  if(g1 < g2) return (3)\r\n}\r\n\r\nresults %>% rowwise() %>% \r\n  mutate(point_t1 = point_t1(goals1, goals2),\r\n                   point_t2 = point_t2(goals1, goals2)) %>% \r\n  pivot_longer(cols = c(team1, team2)) %>% \r\n  mutate(goals = ifelse(name == \"team1\", goals1, goals2)) %>% \r\n  mutate(goal_diff = ifelse(name == \"team1\", goals1 - goals2, goals2 - goals1)) %>% \r\n  mutate(points = ifelse(name == \"team1\", point_t1, point_t2)) %>% \r\n  select(-goals1, -goals2, -point_t1, -point_t2, -name, team = value) %>% \r\n  mutate(datum = as.Date(datum)) %>% \r\n  group_by(team) %>% \r\n  mutate(goals_c = cumsum(goals), \r\n            goal_diff_c = cumsum(goal_diff),\r\n            points_c = cumsum(points)) %>% \r\n  group_by(match_count) %>% \r\n  arrange(desc(points_c)) %>% \r\n  mutate(rank = 1:n()) %>% \r\n  ggplot() +\r\n  aes(xmin = 0 ,  \r\n      xmax = points_c) +  \r\n  aes(ymin = rank - .45,  \r\n      ymax = rank + .45,  \r\n      y = rank,\r\n      fill = team) +\r\n  facet_wrap(vars(match_count)) +\r\n  geom_rect() +\r\n  scale_y_reverse() +\r\n    geom_text(col = \"gray13\",\r\n            hjust = \"right\",\r\n            aes(label = team),\r\n            x = -1) +\r\n  scale_x_continuous(limits = c(-40, NA), breaks = c(0,20,40,60,80)) +\r\n  aes(group = team) +\r\n  labs(title = \"Matchday {closest_state}\", x= \"goals\") +\r\n  gganimate::transition_states(match_count, wrap = FALSE) +\r\n  guides(fill = FALSE) +\r\n  theme_minimal() +\r\n  facet_null() -> anim\r\n\r\nanimate(\r\n  anim, \r\n  fps = 20,\r\n  nframes = 560,\r\n  end_pause = 40\r\n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-06-15T21:03:59+02:00"
    },
    {
      "path": "exercise_04_RJ.html",
      "title": "Homework 04",
      "author": [],
      "contents": "\r\nRead data\r\n\r\nShow code\r\n# Filme von 1970 bis 2020, wenig Informationen pro Film\r\nraw_bechdel <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-09/raw_bechdel.csv')\r\n# Filme von 1970 bis 2013, viele Informationen, viele Informationen pro Film\r\n\r\nmovies <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-09/movies.csv')\r\n\r\n\r\n\r\nShow colorpallets\r\n\r\nShow code\r\nhcl_palettes(type = \"qualitative\", plot = T, n = 9)\r\n\r\n\r\nShow code\r\nhcl_palettes(\"sequential (single-hue)\", n = 7, plot = TRUE)\r\n\r\n\r\n\r\n\r\nVisualisation 1: Metascore and Budget checked for Bechdel-Test result\r\n\r\nShow code\r\nmovies %>% filter(metascore != \"NA\", year==1970:2013) %>% ggplot() +\r\n  aes(x = year, y =  as.numeric(metascore), color=binary) +\r\n  geom_point() +\r\n  geom_jitter() +\r\n  labs(title=\"\", subtitle=\"Evaluation of movies across the years\", caption=\"Evaluation by metacritic.com\",x=\"Year of publication\",y=\"Metascore (0-100)\") -> plot_1\r\n\r\nmovies %>% filter(budget != \"NA\", year==1970:2013) %>% ggplot() +\r\n  aes(x = year, y =  as.numeric(budget), group = year, color=binary) +\r\n  geom_col() +\r\n  labs(title=\"\", subtitle=\"Movie budgets across the years\",x=\"Year of publication\",y=\"Budget in $\") -> plot_2\r\n  \r\n\r\nlibrary(patchwork)\r\n\r\n(plot_1 + plot_2) +\r\n  plot_annotation(title = \"Neither rating nor budget seem to affect the outcome of the Bechdel test\")\r\n\r\n\r\n\r\n\r\nVisualisation 2: Meatscore and IMDB-rating checked for Bechdel-test result\r\n\r\nShow code\r\nmovies %>% filter(metascore != \"NA\", year==1970:2013) %>% ggplot() +\r\n  aes(x = year, y =  as.numeric(metascore), color=metascore) +\r\n  geom_point() +\r\n  theme_dark() +\r\n  coord_cartesian(clip = 'off')+\r\n  scale_y_continuous(limits=c(0,100))+\r\n  scale_color_continuous_sequential(palette = \"teal\", rev=FALSE) +\r\n  labs(title=\"\", subtitle=\"Movie Evaluation Metacritic\", caption=\"Evaluation by metacritic.com\",x=\"Year of publication\",y=NULL) -> plot_1\r\n\r\nmovies %>% filter(imdb_rating != \"NA\", year==1970:2013) %>% ggplot() +\r\n  aes(x = year, y =  as.numeric(imdb_rating), group = year, color=imdb_rating) +\r\n  geom_point() +\r\n  theme_dark() +\r\n  coord_cartesian(clip = 'off')+\r\n  scale_y_continuous(limits=c(0,10)) +\r\n  scale_color_continuous_sequential(palette = \"reds\", rev=FALSE) +\r\n  labs(title=\"\", subtitle=\"Movie Evaluation IMDB\", caption=\"Evaluation by imdb.com\", x=\"Year of publication\", y=NULL) -> plot_2\r\n\r\nmovies %>% filter(metascore != \"NA\", year==1970:2013) %>% ggplot() +\r\n  aes(x = year, y =  as.numeric(metascore), color=binary) +\r\n  geom_point() +\r\n  theme_dark() +\r\n  coord_cartesian(clip = 'off')+\r\n  scale_y_continuous(limits=c(0,100)) +\r\n  labs(title=\"\", subtitle=\"Movie Evaluation Metacritic\",x=\"Year of publication\",y=\"Metascore (0-100)\") -> plot_3\r\n\r\nmovies %>% filter(imdb_rating != \"NA\", year==1970:2013) %>% ggplot() +\r\n  aes(x = year, y =  as.numeric(imdb_rating), color=binary) +\r\n  geom_point() +\r\n  theme_dark() +\r\n  coord_cartesian(clip = 'off')+\r\n  scale_y_continuous(limits=c(0,10)) +\r\n  labs(title=\"\", subtitle=\"Movie Evaluation IMDB\",x=\"Year of publication\",y=\"IMDB score (0-10)\") -> plot_4\r\n  \r\n\r\nlibrary(patchwork)\r\n\r\n(plot_1 + plot_3 + plot_2 + plot_4 ) +\r\n  plot_annotation(title = \"Movie Ratings don't seem to affect the bechdel test\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-06-15T21:04:04+02:00"
    },
    {
      "path": "exercise_05_RJ.html",
      "title": "Homework 05",
      "author": [],
      "contents": "\r\nRead and adapt data\r\n\r\nShow code\r\n#1 Daten Baden-Württemberg\r\nparties_BW <-\r\n  c(\"CDU\", \"AFD\", \"Grüne\", \"FDP\", \"Sonstige\", \"SPD\", \"Die Linke\")\r\nperc_votes_BW <- (c(34.4, 12.2, 13.5, 12.7, 4.5, 16.4, 6.4))\r\n\r\nelection_BW <- data.frame(parties_BW, perc_votes_BW)\r\n\r\n#2 Daten Bayern\r\nparties_BA <-\r\n  c(\"CSU\", \"AFD\", \"Grüne\", \"FDP\", \"Sonstige\", \"SPD\", \"Die Linke\")\r\nperc_votes_BA <- c(38.8, 12.4, 9.8, 10.2, 7.5, 15.3, 6.1)\r\n\r\nelection_BA <- data.frame(parties_BA, perc_votes_BA)\r\n\r\n#3 Daten Berlin\r\nparties_BE <-\r\n  c(\"CDU\", \"AFD\", \"Grüne\", \"FDP\", \"Sonstige\", \"SPD\", \"Die Linke\")\r\nperc_votes_BE <- c(22.7, 12.0, 12.6, 8.9, 7.1, 17.9, 18.8)\r\n\r\nelection_BE <- data.frame(parties_BE, perc_votes_BE)\r\n\r\n#4 Daten Brandenburg\r\nparties_BRA <-\r\n  c(\"CDU\", \"AFD\", \"Grüne\", \"FDP\", \"Sonstige\", \"SPD\", \"Die Linke\")\r\nperc_votes_BRA <- c(26.7, 20.2, 5.0, 7.1, 6.3, 17.6, 17.2)\r\n\r\nelection_BRA <- data.frame(parties_BRA, perc_votes_BRA)\r\n\r\n#5 Daten Bremen\r\nparties_BRE <-\r\n  c(\"CDU\", \"AFD\", \"Grüne\", \"FDP\", \"Sonstige\", \"SPD\", \"Die Linke\")\r\nperc_votes_BRE <- c(26.8, 10.0, 11.1, 9.3, 4.3, 26.8, 13.4)\r\n\r\nelection_BRE <- data.frame(parties_BRE, perc_votes_BRE)\r\n\r\n#6 Daten Hamburg\r\nparties_HA <-\r\n  c(\"CDU\", \"AFD\", \"Grüne\", \"FDP\", \"Sonstige\", \"SPD\", \"Die Linke\")\r\nperc_votes_HA <- c(27.2, 7.8, 13.9, 10.8, 4.5, 23.5, 12.2)\r\n\r\nelection_HA <- data.frame(parties_HA, perc_votes_HA)\r\n\r\n#7 Daten Hessen\r\nparties_HE <-\r\n  c(\"CDU\", \"AFD\", \"Grüne\", \"FDP\", \"Sonstige\", \"SPD\", \"Die Linke\")\r\nperc_votes_HE <- c(30.9, 11.9, 9.7, 11.5, 4.4, 23.5, 8.1)\r\n\r\nelection_HE <- data.frame(parties_HE, perc_votes_HE)\r\n\r\n#8 Daten Mecklenburg-Vorpommern\r\nparties_MV <-\r\n  c(\"CDU\", \"AFD\", \"Grüne\", \"FDP\", \"Sonstige\", \"SPD\", \"Die Linke\")\r\nperc_votes_MV <- c(33.1, 18.6, 4.3, 6.2, 4.9, 15.1, 17.8)\r\n\r\nelection_MV <- data.frame(parties_MV, perc_votes_MV)\r\n\r\n#9 Daten Niedersachsen\r\nparties_NS <-\r\n  c(\"CDU\", \"AFD\", \"Grüne\", \"FDP\", \"Sonstige\", \"SPD\", \"Die Linke\")\r\nperc_votes_NS <- c(34.9, 9.1, 8.7, 9.3, 3.6, 27.4, 7.0)\r\n\r\nelection_NS <- data.frame(parties_NS, perc_votes_NS)\r\n\r\n#10 Daten Nordrhein-Westfalen\r\nparties_NRW <-\r\n  c(\"CDU\", \"AFD\", \"Grüne\", \"FDP\", \"Sonstige\", \"SPD\", \"Die Linke\")\r\nperc_votes_NRW <- c(32.6, 9.4, 7.6, 13.1, 3.8, 26.0, 7.5)\r\n\r\nelection_NRW <- data.frame(parties_NRW, perc_votes_NRW)\r\n\r\n#11 Daten Rheinland-Pfalz\r\nparties_RP <-\r\n  c(\"CDU\", \"AFD\", \"Grüne\", \"FDP\", \"Sonstige\", \"SPD\", \"Die Linke\")\r\nperc_votes_RP <- c(35.9, 11.2, 7.6, 10.4, 3.9, 24.1, 6.8)\r\n\r\nelection_RP <- data.frame(parties_RP, perc_votes_RP)\r\n\r\n#12 Daten Saarland\r\nparties_SL <-\r\n  c(\"CDU\", \"AFD\", \"Grüne\", \"FDP\", \"Sonstige\", \"SPD\", \"Die Linke\")\r\nperc_votes_SL <- c(32.4, 10.1, 6.0, 7.6, 3.9, 27.1, 12.9)\r\n\r\nelection_SL <- data.frame(parties_SL, perc_votes_SL)\r\n\r\n#13 Daten Sachsen\r\nparties_SAC <-\r\n  c(\"CDU\", \"AFD\", \"Grüne\", \"FDP\", \"Sonstige\", \"SPD\", \"Die Linke\")\r\nperc_votes_SAC <- c(26.9, 27.0, 4.6, 8.2, 6.7, 10.5, 16.1)\r\n\r\nelection_SAC <- data.frame(parties_SAC, perc_votes_SAC)\r\n\r\n#14 Daten Sachsen_Anhalt\r\nparties_SAA <-\r\n  c(\"CDU\", \"AFD\", \"Grüne\", \"FDP\", \"Sonstige\", \"SPD\", \"Die Linke\")\r\nperc_votes_SAA <- c(30.3, 19.6, 3.7, 7.8, 5.7, 15.2, 17.7)\r\n\r\nelection_SAA <- data.frame(parties_SAA, perc_votes_SAA)\r\n\r\n#15 Daten Schleswig-Holstein\r\nparties_SH <-\r\n  c(\"CDU\", \"AFD\", \"Grüne\", \"FDP\", \"Sonstige\", \"SPD\", \"Die Linke\")\r\nperc_votes_SH <- c(34.0, 8.2, 12.0, 12.6, 2.7, 23.3, 7.3)\r\n\r\nelection_SH <- data.frame(parties_SH, perc_votes_SH)\r\n\r\n#16 Daten Thüringen\r\nparties_TH <-\r\n  c(\"CDU\", \"AFD\", \"Grüne\", \"FDP\", \"Sonstige\", \"SPD\", \"Die Linke\")\r\nperc_votes_TH <- c(28.8, 22.7, 4.1, 7.8, 6.5, 13.2, 16.9)\r\n\r\nelection_TH <- data.frame(parties_TH, perc_votes_TH)\r\n\r\n\r\n\r\nSort data\r\n\r\nShow code\r\n#1 Daten Baden-Württemberg\r\npie_data_BW <- election_BW %>%\r\n  arrange(perc_votes_BW) %>% # sort so pie slices end up sorted\r\n  mutate(\r\n    end_angle = 2*pi*cumsum(perc_votes_BW)/sum(perc_votes_BW),   # ending angle for each pie slice\r\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\r\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\r\n    # horizontal and vertical justifications for outer labels\r\n    hjust = ifelse(mid_angle > pi, 1, 0),\r\n    vjust = ifelse(mid_angle < pi/2 | mid_angle > 3*pi/2, 0, 1))\r\n\r\n#2 Bayern    \r\npie_data_BA <- election_BA %>%\r\n  arrange(perc_votes_BA) %>% # sort so pie slices end up sorted\r\n  mutate(\r\n    end_angle = 2*pi*cumsum(perc_votes_BA)/sum(perc_votes_BA),   # ending angle for each pie slice\r\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\r\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\r\n    # horizontal and vertical justifications for outer labels\r\n    hjust = ifelse(mid_angle > pi, 1, 0),\r\n    vjust = ifelse(mid_angle < pi/2 | mid_angle > 3*pi/2, 0, 1))\r\n\r\n#3 Berlin\r\npie_data_BE <- election_BE %>%\r\n  arrange(perc_votes_BE) %>% # sort so pie slices end up sorted\r\n  mutate(\r\n    end_angle = 2*pi*cumsum(perc_votes_BE)/sum(perc_votes_BE),   # ending angle for each pie slice\r\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\r\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\r\n    # horizontal and vertical justifications for outer labels\r\n    hjust = ifelse(mid_angle > pi, 1, 0),\r\n    vjust = ifelse(mid_angle < pi/2 | mid_angle > 3*pi/2, 0, 1))\r\n\r\n#4 Brandenburg\r\npie_data_BRA <- election_BRA %>%\r\n  arrange(perc_votes_BRA) %>% # sort so pie slices end up sorted\r\n  mutate(\r\n    end_angle = 2*pi*cumsum(perc_votes_BRA)/sum(perc_votes_BRA),   # ending angle for each pie slice\r\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\r\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\r\n    # horizontal and vertical justifications for outer labels\r\n    hjust = ifelse(mid_angle > pi, 1, 0),\r\n    vjust = ifelse(mid_angle < pi/2 | mid_angle > 3*pi/2, 0, 1))\r\n\r\n#5 Bremen\r\npie_data_BRE <- election_BRE %>%\r\n  arrange(perc_votes_BRE) %>% # sort so pie slices end up sorted\r\n  mutate(\r\n    end_angle = 2*pi*cumsum(perc_votes_BRE)/sum(perc_votes_BRE),   # ending angle for each pie slice\r\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\r\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\r\n    # horizontal and vertical justifications for outer labels\r\n    hjust = ifelse(mid_angle > pi, 1, 0),\r\n    vjust = ifelse(mid_angle < pi/2 | mid_angle > 3*pi/2, 0, 1))\r\n\r\n#6 Hamburg\r\npie_data_HA <- election_HA %>%\r\n  arrange(perc_votes_HA) %>% # sort so pie slices end up sorted\r\n  mutate(\r\n    end_angle = 2*pi*cumsum(perc_votes_HA)/sum(perc_votes_HA),   # ending angle for each pie slice\r\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\r\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\r\n    # horizontal and vertical justifications for outer labels\r\n    hjust = ifelse(mid_angle > pi, 1, 0),\r\n    vjust = ifelse(mid_angle < pi/2 | mid_angle > 3*pi/2, 0, 1))\r\n\r\n#7 Hessen\r\npie_data_HE <- election_HE %>%\r\n  arrange(perc_votes_HE) %>% # sort so pie slices end up sorted\r\n  mutate(\r\n    end_angle = 2*pi*cumsum(perc_votes_HE)/sum(perc_votes_HE),   # ending angle for each pie slice\r\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\r\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\r\n    # horizontal and vertical justifications for outer labels\r\n    hjust = ifelse(mid_angle > pi, 1, 0),\r\n    vjust = ifelse(mid_angle < pi/2 | mid_angle > 3*pi/2, 0, 1))\r\n\r\n#8 Mecklenburg-Vorpommern\r\npie_data_MV <- election_MV %>%\r\n  arrange(perc_votes_MV) %>% # sort so pie slices end up sorted\r\n  mutate(\r\n    end_angle = 2*pi*cumsum(perc_votes_MV)/sum(perc_votes_MV),   # ending angle for each pie slice\r\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\r\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\r\n    # horizontal and vertical justifications for outer labels\r\n    hjust = ifelse(mid_angle > pi, 1, 0),\r\n    vjust = ifelse(mid_angle < pi/2 | mid_angle > 3*pi/2, 0, 1))\r\n\r\n#9 Niedersachsen\r\npie_data_NS <- election_NS %>%\r\n  arrange(perc_votes_NS) %>% # sort so pie slices end up sorted\r\n  mutate(\r\n    end_angle = 2*pi*cumsum(perc_votes_NS)/sum(perc_votes_NS),   # ending angle for each pie slice\r\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\r\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\r\n    # horizontal and vertical justifications for outer labels\r\n    hjust = ifelse(mid_angle > pi, 1, 0),\r\n    vjust = ifelse(mid_angle < pi/2 | mid_angle > 3*pi/2, 0, 1))\r\n\r\n#10 Nordrhein-Westfalen\r\npie_data_NRW <- election_NRW %>%\r\n  arrange(perc_votes_NRW) %>% # sort so pie slices end up sorted\r\n  mutate(\r\n    end_angle = 2*pi*cumsum(perc_votes_NRW)/sum(perc_votes_NRW),   # ending angle for each pie slice\r\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\r\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\r\n    # horizontal and vertical justifications for outer labels\r\n    hjust = ifelse(mid_angle > pi, 1, 0),\r\n    vjust = ifelse(mid_angle < pi/2 | mid_angle > 3*pi/2, 0, 1))\r\n\r\n#11 Rheinland-Pfalz\r\npie_data_RP <- election_RP %>%\r\n  arrange(perc_votes_RP) %>% # sort so pie slices end up sorted\r\n  mutate(\r\n    end_angle = 2*pi*cumsum(perc_votes_RP)/sum(perc_votes_RP),   # ending angle for each pie slice\r\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\r\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\r\n    # horizontal and vertical justifications for outer labels\r\n    hjust = ifelse(mid_angle > pi, 1, 0),\r\n    vjust = ifelse(mid_angle < pi/2 | mid_angle > 3*pi/2, 0, 1))\r\n\r\n#12 Saarland\r\npie_data_SL <- election_SL %>%\r\n  arrange(perc_votes_SL) %>% # sort so pie slices end up sorted\r\n  mutate(\r\n    end_angle = 2*pi*cumsum(perc_votes_SL)/sum(perc_votes_SL),   # ending angle for each pie slice\r\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\r\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\r\n    # horizontal and vertical justifications for outer labels\r\n    hjust = ifelse(mid_angle > pi, 1, 0),\r\n    vjust = ifelse(mid_angle < pi/2 | mid_angle > 3*pi/2, 0, 1))\r\n\r\n#13 Sachsen\r\npie_data_SAC <- election_SAC %>%\r\n  arrange(perc_votes_SAC) %>% # sort so pie slices end up sorted\r\n  mutate(\r\n    end_angle = 2*pi*cumsum(perc_votes_SAC)/sum(perc_votes_SAC),   # ending angle for each pie slice\r\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\r\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\r\n    # horizontal and vertical justifications for outer labels\r\n    hjust = ifelse(mid_angle > pi, 1, 0),\r\n    vjust = ifelse(mid_angle < pi/2 | mid_angle > 3*pi/2, 0, 1))\r\n\r\n#14 Sachsen-Anhalt\r\npie_data_SAA <- election_SAA %>%\r\n  arrange(perc_votes_SAA) %>% # sort so pie slices end up sorted\r\n  mutate(\r\n    end_angle = 2*pi*cumsum(perc_votes_SAA)/sum(perc_votes_SAA),   # ending angle for each pie slice\r\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\r\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\r\n    # horizontal and vertical justifications for outer labels\r\n    hjust = ifelse(mid_angle > pi, 1, 0),\r\n    vjust = ifelse(mid_angle < pi/2 | mid_angle > 3*pi/2, 0, 1))\r\n\r\n#15 Schleswig-Holstein\r\npie_data_SH <- election_SH %>%\r\n  arrange(perc_votes_SH) %>% # sort so pie slices end up sorted\r\n  mutate(\r\n    end_angle = 2*pi*cumsum(perc_votes_SH)/sum(perc_votes_SH),   # ending angle for each pie slice\r\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\r\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\r\n    # horizontal and vertical justifications for outer labels\r\n    hjust = ifelse(mid_angle > pi, 1, 0),\r\n    vjust = ifelse(mid_angle < pi/2 | mid_angle > 3*pi/2, 0, 1))\r\n\r\n#16 Thüringen\r\npie_data_TH <- election_TH %>%\r\n  arrange(perc_votes_TH) %>% # sort so pie slices end up sorted\r\n  mutate(\r\n    end_angle = 2*pi*cumsum(perc_votes_TH)/sum(perc_votes_TH),   # ending angle for each pie slice\r\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\r\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\r\n    # horizontal and vertical justifications for outer labels\r\n    hjust = ifelse(mid_angle > pi, 1, 0),\r\n    vjust = ifelse(mid_angle < pi/2 | mid_angle > 3*pi/2, 0, 1))\r\n\r\n\r\n\r\nGenerate plots for each “Bundesland”\r\n\r\nShow code\r\n#1 Baden-Würtemberg\r\nggplot(pie_data_BW) +\r\n  aes(\r\n    x0 = 0,\r\n    y0 = 0,\r\n    r0 = 0.4,\r\n    r = 1,\r\n    start = start_angle,\r\n    end = end_angle,\r\n    fill = parties_BW\r\n  ) +\r\n  labs(title = \"Stimmenverteilung Baden-Würtemberg\") +\r\n  theme_void() +\r\n  geom_arc_bar() +\r\n  scale_fill_manual(\r\n    values = c(\r\n      \"CDU\" = \"#0C0C0C\",\r\n      \"AFD\" = \"#009DE0\",\r\n      \"Grüne\" = \"#65A22C\",\r\n      \"FDP\" = \"#FEED01\",\r\n      \"Sonstige\" = \"grey\",\r\n      \"SPD\" = \"#E4000F\",\r\n      \"Die Linke\" = \"#E90098\"\r\n    )\r\n  ) +\r\n  geom_text(# place amounts inside the pie\r\n    aes(\r\n      x = 0.7 * sin(mid_angle),\r\n      y = 0.7 * cos(mid_angle),\r\n      label = perc_votes_BW,\r\n      color = parties_BW\r\n    )) + scale_color_manual(values = c(\"black\", \"white\", \"black\", \"black\", \"black\", \"black\", \"black\")) +\r\n  theme(legend.position = \"none\") +\r\n  geom_text(# place party name outside the pie\r\n    aes(\r\n      x = 1.05 * sin(mid_angle),\r\n      y = 1.05 * cos(mid_angle),\r\n      label = parties_BW,\r\n      hjust = hjust,\r\n      vjust = vjust,\r\n    )) +\r\n  coord_fixed(xlim = c(-1.8, 1.3)) -> P_BW\r\n\r\n#2 Bayern\r\nggplot(pie_data_BA) +\r\n  aes(\r\n    x0 = 0,\r\n    y0 = 0,\r\n    r0 = 0.4,\r\n    r = 1,\r\n    start = start_angle,\r\n    end = end_angle,\r\n    fill = parties_BA\r\n  ) +\r\n  labs(title = \"Stimmenverteilung Bayern\") +\r\n  theme_void() +\r\n  geom_arc_bar() +\r\n  scale_fill_manual(\r\n    values = c(\r\n      \"CSU\" = \"#0C0C0C\",\r\n      \"AFD\" = \"#009DE0\",\r\n      \"Grüne\" = \"#65A22C\",\r\n      \"FDP\" = \"#FEED01\",\r\n      \"Sonstige\" = \"grey\",\r\n      \"SPD\" = \"#E4000F\",\r\n      \"Die Linke\" = \"#E90098\"\r\n    )\r\n  ) +\r\n  geom_text(# place amounts inside the pie\r\n    aes(\r\n      x = 0.7 * sin(mid_angle),\r\n      y = 0.7 * cos(mid_angle),\r\n      label = perc_votes_BA,\r\n      color = parties_BA\r\n    )) + scale_color_manual(values = c(\"black\", \"white\", \"black\", \"black\", \"black\", \"black\", \"black\")) +\r\n  theme(legend.position = \"none\") +\r\n  geom_text(# place party name outside the pie\r\n    aes(\r\n      x = 1.05 * sin(mid_angle),\r\n      y = 1.05 * cos(mid_angle),\r\n      label = parties_BA,\r\n      hjust = hjust,\r\n      vjust = vjust,\r\n    )) +\r\n  coord_fixed(xlim = c(-1.8, 1.3)) -> P_BA\r\n\r\n#3 Berlin\r\nggplot(pie_data_BE) +\r\n  aes(\r\n    x0 = 0,\r\n    y0 = 0,\r\n    r0 = 0.4,\r\n    r = 1,\r\n    start = start_angle,\r\n    end = end_angle,\r\n    fill = parties_BE\r\n  ) +\r\n  labs(title = \"Stimmenverteilung Berlin\") +\r\n  theme_void() +\r\n  geom_arc_bar() +\r\n  scale_fill_manual(\r\n    values = c(\r\n      \"CDU\" = \"#0C0C0C\",\r\n      \"AFD\" = \"#009DE0\",\r\n      \"Grüne\" = \"#65A22C\",\r\n      \"FDP\" = \"#FEED01\",\r\n      \"Sonstige\" = \"grey\",\r\n      \"SPD\" = \"#E4000F\",\r\n      \"Die Linke\" = \"#E90098\"\r\n    )\r\n  ) +\r\n  geom_text(# place amounts inside the pie\r\n    aes(\r\n      x = 0.7 * sin(mid_angle),\r\n      y = 0.7 * cos(mid_angle),\r\n      label = perc_votes_BE,\r\n      color = parties_BE\r\n    )) + scale_color_manual(values = c(\"black\", \"white\", \"black\", \"black\", \"black\", \"black\", \"black\")) +\r\n  theme(legend.position = \"none\") +\r\n  geom_text(# place party name outside the pie\r\n    aes(\r\n      x = 1.05 * sin(mid_angle),\r\n      y = 1.05 * cos(mid_angle),\r\n      label = parties_BE,\r\n      hjust = hjust,\r\n      vjust = vjust,\r\n    )) +\r\n  coord_fixed(xlim = c(-1.8, 1.3)) -> P_BE\r\n\r\n#4 Brandenburg\r\nggplot(pie_data_BRA) +\r\n  aes(\r\n    x0 = 0,\r\n    y0 = 0,\r\n    r0 = 0.4,\r\n    r = 1,\r\n    start = start_angle,\r\n    end = end_angle,\r\n    fill = parties_BRA\r\n  ) +\r\n  labs(title = \"Stimmenverteilung Brandenburg\") +\r\n  theme_void() +\r\n  geom_arc_bar() +\r\n  scale_fill_manual(\r\n    values = c(\r\n      \"CDU\" = \"#0C0C0C\",\r\n      \"AFD\" = \"#009DE0\",\r\n      \"Grüne\" = \"#65A22C\",\r\n      \"FDP\" = \"#FEED01\",\r\n      \"Sonstige\" = \"grey\",\r\n      \"SPD\" = \"#E4000F\",\r\n      \"Die Linke\" = \"#E90098\"\r\n    )\r\n  ) +\r\n  geom_text(# place amounts inside the pie\r\n    aes(\r\n      x = 0.7 * sin(mid_angle),\r\n      y = 0.7 * cos(mid_angle),\r\n      label = perc_votes_BRA,\r\n      color = parties_BRA\r\n    )) + scale_color_manual(values = c(\"black\", \"white\", \"black\", \"black\", \"black\", \"black\", \"black\")) +\r\n  theme(legend.position = \"none\") +\r\n  geom_text(# place party name outside the pie\r\n    aes(\r\n      x = 1.05 * sin(mid_angle),\r\n      y = 1.05 * cos(mid_angle),\r\n      label = parties_BRA,\r\n      hjust = hjust,\r\n      vjust = vjust,\r\n    )) +\r\n  coord_fixed(xlim = c(-1.8, 1.3)) -> P_BRA\r\n\r\n#5 Bremen\r\nggplot(pie_data_BRE) +\r\n  aes(\r\n    x0 = 0,\r\n    y0 = 0,\r\n    r0 = 0.4,\r\n    r = 1,\r\n    start = start_angle,\r\n    end = end_angle,\r\n    fill = parties_BRE\r\n  ) +\r\n  labs(title = \"Stimmenverteilung Bremen\") +\r\n  theme_void() +\r\n  geom_arc_bar() +\r\n  scale_fill_manual(\r\n    values = c(\r\n      \"CDU\" = \"#0C0C0C\",\r\n      \"AFD\" = \"#009DE0\",\r\n      \"Grüne\" = \"#65A22C\",\r\n      \"FDP\" = \"#FEED01\",\r\n      \"Sonstige\" = \"grey\",\r\n      \"SPD\" = \"#E4000F\",\r\n      \"Die Linke\" = \"#E90098\"\r\n    )\r\n  ) +\r\n  geom_text(# place amounts inside the pie\r\n    aes(\r\n      x = 0.7 * sin(mid_angle),\r\n      y = 0.7 * cos(mid_angle),\r\n      label = perc_votes_BRE,\r\n      color = parties_BRE\r\n    )) + scale_color_manual(values = c(\"black\", \"white\", \"black\", \"black\", \"black\", \"black\", \"black\")) +\r\n  theme(legend.position = \"none\") +\r\n  geom_text(# place party name outside the pie\r\n    aes(\r\n      x = 1.05 * sin(mid_angle),\r\n      y = 1.05 * cos(mid_angle),\r\n      label = parties_BRE,\r\n      hjust = hjust,\r\n      vjust = vjust,\r\n    )) +\r\n  coord_fixed(xlim = c(-1.8, 1.3)) -> P_BRE\r\n\r\n#6 Hamburg\r\nggplot(pie_data_HA) +\r\n  aes(\r\n    x0 = 0,\r\n    y0 = 0,\r\n    r0 = 0.4,\r\n    r = 1,\r\n    start = start_angle,\r\n    end = end_angle,\r\n    fill = parties_HA\r\n  ) +\r\n  labs(title = \"Stimmenverteilung Hamburg\") +\r\n  theme_void() +\r\n  geom_arc_bar() +\r\n  scale_fill_manual(\r\n    values = c(\r\n      \"CDU\" = \"#0C0C0C\",\r\n      \"AFD\" = \"#009DE0\",\r\n      \"Grüne\" = \"#65A22C\",\r\n      \"FDP\" = \"#FEED01\",\r\n      \"Sonstige\" = \"grey\",\r\n      \"SPD\" = \"#E4000F\",\r\n      \"Die Linke\" = \"#E90098\"\r\n    )\r\n  ) +\r\n  geom_text(# place amounts inside the pie\r\n    aes(\r\n      x = 0.7 * sin(mid_angle),\r\n      y = 0.7 * cos(mid_angle),\r\n      label = perc_votes_HA,\r\n      color = parties_HA\r\n    )) + scale_color_manual(values = c(\"black\", \"white\", \"black\", \"black\", \"black\", \"black\", \"black\")) +\r\n  theme(legend.position = \"none\") +\r\n  geom_text(# place party name outside the pie\r\n    aes(\r\n      x = 1.05 * sin(mid_angle),\r\n      y = 1.05 * cos(mid_angle),\r\n      label = parties_HA,\r\n      hjust = hjust,\r\n      vjust = vjust,\r\n    )) +\r\n  coord_fixed(xlim = c(-1.8, 1.3)) -> P_HA\r\n\r\n#7 Hessen\r\nggplot(pie_data_HE) +\r\n  aes(\r\n    x0 = 0,\r\n    y0 = 0,\r\n    r0 = 0.4,\r\n    r = 1,\r\n    start = start_angle,\r\n    end = end_angle,\r\n    fill = parties_HE\r\n  ) +\r\n  labs(title = \"Stimmenverteilung Hessen\") +\r\n  theme_void() +\r\n  geom_arc_bar() +\r\n  scale_fill_manual(\r\n    values = c(\r\n      \"CDU\" = \"#0C0C0C\",\r\n      \"AFD\" = \"#009DE0\",\r\n      \"Grüne\" = \"#65A22C\",\r\n      \"FDP\" = \"#FEED01\",\r\n      \"Sonstige\" = \"grey\",\r\n      \"SPD\" = \"#E4000F\",\r\n      \"Die Linke\" = \"#E90098\"\r\n    )\r\n  ) +\r\n  geom_text(# place amounts inside the pie\r\n    aes(\r\n      x = 0.7 * sin(mid_angle),\r\n      y = 0.7 * cos(mid_angle),\r\n      label = perc_votes_HE,\r\n      color = parties_HE\r\n    )) + scale_color_manual(values = c(\"black\", \"white\", \"black\", \"black\", \"black\", \"black\", \"black\")) +\r\n  theme(legend.position = \"none\") +\r\n  geom_text(# place party name outside the pie\r\n    aes(\r\n      x = 1.05 * sin(mid_angle),\r\n      y = 1.05 * cos(mid_angle),\r\n      label = parties_HE,\r\n      hjust = hjust,\r\n      vjust = vjust,\r\n    )) +\r\n  coord_fixed(xlim = c(-1.8, 1.3)) -> P_HE\r\n\r\n#8 Mecklenburg-Vorpommern\r\nggplot(pie_data_MV) +\r\n  aes(\r\n    x0 = 0,\r\n    y0 = 0,\r\n    r0 = 0.4,\r\n    r = 1,\r\n    start = start_angle,\r\n    end = end_angle,\r\n    fill = parties_MV\r\n  ) +\r\n  labs(title = \"Stimmenverteilung Mecklenburg-Vorpommern\") +\r\n  theme_void() +\r\n  geom_arc_bar() +\r\n  scale_fill_manual(\r\n    values = c(\r\n      \"CDU\" = \"#0C0C0C\",\r\n      \"AFD\" = \"#009DE0\",\r\n      \"Grüne\" = \"#65A22C\",\r\n      \"FDP\" = \"#FEED01\",\r\n      \"Sonstige\" = \"grey\",\r\n      \"SPD\" = \"#E4000F\",\r\n      \"Die Linke\" = \"#E90098\"\r\n    )\r\n  ) +\r\n  geom_text(# place amounts inside the pie\r\n    aes(\r\n      x = 0.7 * sin(mid_angle),\r\n      y = 0.7 * cos(mid_angle),\r\n      label = perc_votes_MV,\r\n      color = parties_MV\r\n    )) + scale_color_manual(values = c(\"black\", \"white\", \"black\", \"black\", \"black\", \"black\", \"black\")) +\r\n  theme(legend.position = \"none\") +\r\n  geom_text(# place party name outside the pie\r\n    aes(\r\n      x = 1.05 * sin(mid_angle),\r\n      y = 1.05 * cos(mid_angle),\r\n      label = parties_MV,\r\n      hjust = hjust,\r\n      vjust = vjust,\r\n    )) +\r\n  coord_fixed(xlim = c(-1.8, 1.3)) -> P_MV\r\n\r\n#9 Niedersachsen\r\nggplot(pie_data_NS) +\r\n  aes(\r\n    x0 = 0,\r\n    y0 = 0,\r\n    r0 = 0.4,\r\n    r = 1,\r\n    start = start_angle,\r\n    end = end_angle,\r\n    fill = parties_NS\r\n  ) +\r\n  labs(title = \"Stimmenverteilung Niedersachsen\") +\r\n  theme_void() +\r\n  geom_arc_bar() +\r\n  scale_fill_manual(\r\n    values = c(\r\n      \"CDU\" = \"#0C0C0C\",\r\n      \"AFD\" = \"#009DE0\",\r\n      \"Grüne\" = \"#65A22C\",\r\n      \"FDP\" = \"#FEED01\",\r\n      \"Sonstige\" = \"grey\",\r\n      \"SPD\" = \"#E4000F\",\r\n      \"Die Linke\" = \"#E90098\"\r\n    )\r\n  ) +\r\n  geom_text(# place amounts inside the pie\r\n    aes(\r\n      x = 0.7 * sin(mid_angle),\r\n      y = 0.7 * cos(mid_angle),\r\n      label = perc_votes_NS,\r\n      color = parties_NS\r\n    )) + scale_color_manual(values = c(\"black\", \"white\", \"black\", \"black\", \"black\", \"black\", \"black\")) +\r\n  theme(legend.position = \"none\") +\r\n  geom_text(# place party name outside the pie\r\n    aes(\r\n      x = 1.05 * sin(mid_angle),\r\n      y = 1.05 * cos(mid_angle),\r\n      label = parties_NS,\r\n      hjust = hjust,\r\n      vjust = vjust,\r\n    )) +\r\n  coord_fixed(xlim = c(-1.8, 1.3)) -> P_NS\r\n\r\n#10 Nordrhein-Westfalen\r\nggplot(pie_data_NRW) +\r\n  aes(\r\n    x0 = 0,\r\n    y0 = 0,\r\n    r0 = 0.4,\r\n    r = 1,\r\n    start = start_angle,\r\n    end = end_angle,\r\n    fill = parties_NRW\r\n  ) +\r\n  labs(title = \"Stimmenverteilung Nordrhein-Westfalen\") +\r\n  theme_void() +\r\n  geom_arc_bar() +\r\n  scale_fill_manual(\r\n    values = c(\r\n      \"CDU\" = \"#0C0C0C\",\r\n      \"AFD\" = \"#009DE0\",\r\n      \"Grüne\" = \"#65A22C\",\r\n      \"FDP\" = \"#FEED01\",\r\n      \"Sonstige\" = \"grey\",\r\n      \"SPD\" = \"#E4000F\",\r\n      \"Die Linke\" = \"#E90098\"\r\n    )\r\n  ) +\r\n  geom_text(# place amounts inside the pie\r\n    aes(\r\n      x = 0.7 * sin(mid_angle),\r\n      y = 0.7 * cos(mid_angle),\r\n      label = perc_votes_NRW,\r\n      color = parties_NRW\r\n    )) + scale_color_manual(values = c(\"black\", \"white\", \"black\", \"black\", \"black\", \"black\", \"black\")) +\r\n  theme(legend.position = \"none\") +\r\n  geom_text(# place party name outside the pie\r\n    aes(\r\n      x = 1.05 * sin(mid_angle),\r\n      y = 1.05 * cos(mid_angle),\r\n      label = parties_NRW,\r\n      hjust = hjust,\r\n      vjust = vjust,\r\n    )) +\r\n  coord_fixed(xlim = c(-1.8, 1.3)) -> P_NRW\r\n\r\n#11 Rheinland-Pfalz\r\nggplot(pie_data_RP) +\r\n  aes(\r\n    x0 = 0,\r\n    y0 = 0,\r\n    r0 = 0.4,\r\n    r = 1,\r\n    start = start_angle,\r\n    end = end_angle,\r\n    fill = parties_RP\r\n  ) +\r\n  labs(title = \"Stimmenverteilung Rheinland-Pfalz\") +\r\n  theme_void() +\r\n  geom_arc_bar() +\r\n  scale_fill_manual(\r\n    values = c(\r\n      \"CDU\" = \"#0C0C0C\",\r\n      \"AFD\" = \"#009DE0\",\r\n      \"Grüne\" = \"#65A22C\",\r\n      \"FDP\" = \"#FEED01\",\r\n      \"Sonstige\" = \"grey\",\r\n      \"SPD\" = \"#E4000F\",\r\n      \"Die Linke\" = \"#E90098\"\r\n    )\r\n  ) +\r\n  geom_text(# place amounts inside the pie\r\n    aes(\r\n      x = 0.7 * sin(mid_angle),\r\n      y = 0.7 * cos(mid_angle),\r\n      label = perc_votes_RP,\r\n      color = parties_RP\r\n    )) + scale_color_manual(values = c(\"black\", \"white\", \"black\", \"black\", \"black\", \"black\", \"black\")) +\r\n  theme(legend.position = \"none\") +\r\n  geom_text(# place party name outside the pie\r\n    aes(\r\n      x = 1.05 * sin(mid_angle),\r\n      y = 1.05 * cos(mid_angle),\r\n      label = parties_RP,\r\n      hjust = hjust,\r\n      vjust = vjust,\r\n    )) +\r\n  coord_fixed(xlim = c(-1.8, 1.3)) -> P_RP\r\n\r\n#12 Saarland\r\nggplot(pie_data_SL) +\r\n  aes(\r\n    x0 = 0,\r\n    y0 = 0,\r\n    r0 = 0.4,\r\n    r = 1,\r\n    start = start_angle,\r\n    end = end_angle,\r\n    fill = parties_SL\r\n  ) +\r\n  labs(title = \"Stimmenverteilung Saarland\") +\r\n  theme_void() +\r\n  geom_arc_bar() +\r\n  scale_fill_manual(\r\n    values = c(\r\n      \"CDU\" = \"#0C0C0C\",\r\n      \"AFD\" = \"#009DE0\",\r\n      \"Grüne\" = \"#65A22C\",\r\n      \"FDP\" = \"#FEED01\",\r\n      \"Sonstige\" = \"grey\",\r\n      \"SPD\" = \"#E4000F\",\r\n      \"Die Linke\" = \"#E90098\"\r\n    )\r\n  ) +\r\n  geom_text(# place amounts inside the pie\r\n    aes(\r\n      x = 0.7 * sin(mid_angle),\r\n      y = 0.7 * cos(mid_angle),\r\n      label = perc_votes_SL,\r\n      color = parties_SL\r\n    )) + scale_color_manual(values = c(\"black\", \"white\", \"black\", \"black\", \"black\", \"black\", \"black\")) +\r\n  theme(legend.position = \"none\") +\r\n  geom_text(# place party name outside the pie\r\n    aes(\r\n      x = 1.05 * sin(mid_angle),\r\n      y = 1.05 * cos(mid_angle),\r\n      label = parties_SL,\r\n      hjust = hjust,\r\n      vjust = vjust,\r\n    )) +\r\n  coord_fixed(xlim = c(-1.8, 1.3)) -> P_SL\r\n\r\n#13 Sachsen\r\nggplot(pie_data_SAC) +\r\n  aes(\r\n    x0 = 0,\r\n    y0 = 0,\r\n    r0 = 0.4,\r\n    r = 1,\r\n    start = start_angle,\r\n    end = end_angle,\r\n    fill = parties_SAC\r\n  ) +\r\n  labs(title = \"Stimmenverteilung Sachsen\") +\r\n  theme_void() +\r\n  geom_arc_bar() +\r\n  scale_fill_manual(\r\n    values = c(\r\n      \"CDU\" = \"#0C0C0C\",\r\n      \"AFD\" = \"#009DE0\",\r\n      \"Grüne\" = \"#65A22C\",\r\n      \"FDP\" = \"#FEED01\",\r\n      \"Sonstige\" = \"grey\",\r\n      \"SPD\" = \"#E4000F\",\r\n      \"Die Linke\" = \"#E90098\"\r\n    )\r\n  ) +\r\n  geom_text(# place amounts inside the pie\r\n    aes(\r\n      x = 0.7 * sin(mid_angle),\r\n      y = 0.7 * cos(mid_angle),\r\n      label = perc_votes_SAC,\r\n      color = parties_SAC\r\n    )) + scale_color_manual(values = c(\"black\", \"white\", \"black\", \"black\", \"black\", \"black\", \"black\")) +\r\n  theme(legend.position = \"none\") +\r\n  geom_text(# place party name outside the pie\r\n    aes(\r\n      x = 1.05 * sin(mid_angle),\r\n      y = 1.05 * cos(mid_angle),\r\n      label = parties_SAC,\r\n      hjust = hjust,\r\n      vjust = vjust,\r\n    )) +\r\n  coord_fixed(xlim = c(-1.8, 1.3)) -> P_SAC\r\n\r\n#14 Sachsen-Anhalt\r\nggplot(pie_data_SAA) +\r\n  aes(\r\n    x0 = 0,\r\n    y0 = 0,\r\n    r0 = 0.4,\r\n    r = 1,\r\n    start = start_angle,\r\n    end = end_angle,\r\n    fill = parties_SAA\r\n  ) +\r\n  labs(title = \"Stimmenverteilung Sachsen-Anhalt\") +\r\n  theme_void() +\r\n  geom_arc_bar() +\r\n  scale_fill_manual(\r\n    values = c(\r\n      \"CDU\" = \"#0C0C0C\",\r\n      \"AFD\" = \"#009DE0\",\r\n      \"Grüne\" = \"#65A22C\",\r\n      \"FDP\" = \"#FEED01\",\r\n      \"Sonstige\" = \"grey\",\r\n      \"SPD\" = \"#E4000F\",\r\n      \"Die Linke\" = \"#E90098\"\r\n    )\r\n  ) +\r\n  geom_text(# place amounts inside the pie\r\n    aes(\r\n      x = 0.7 * sin(mid_angle),\r\n      y = 0.7 * cos(mid_angle),\r\n      label = perc_votes_SAA,\r\n      color = parties_SAA\r\n    )) + scale_color_manual(values = c(\"black\", \"white\", \"black\", \"black\", \"black\", \"black\", \"black\")) +\r\n  theme(legend.position = \"none\") +\r\n  geom_text(# place party name outside the pie\r\n    aes(\r\n      x = 1.05 * sin(mid_angle),\r\n      y = 1.05 * cos(mid_angle),\r\n      label = parties_SAA,\r\n      hjust = hjust,\r\n      vjust = vjust,\r\n    )) +\r\n  coord_fixed(xlim = c(-1.8, 1.3)) -> P_SAA\r\n\r\n#15 Schleswig-Holstein\r\nggplot(pie_data_SH) +\r\n  aes(\r\n    x0 = 0,\r\n    y0 = 0,\r\n    r0 = 0.4,\r\n    r = 1,\r\n    start = start_angle,\r\n    end = end_angle,\r\n    fill = parties_SH\r\n  ) +\r\n  labs(title = \"Stimmenverteilung Schleswig-Holstein\") +\r\n  theme_void() +\r\n  geom_arc_bar() +\r\n  scale_fill_manual(\r\n    values = c(\r\n      \"CDU\" = \"#0C0C0C\",\r\n      \"AFD\" = \"#009DE0\",\r\n      \"Grüne\" = \"#65A22C\",\r\n      \"FDP\" = \"#FEED01\",\r\n      \"Sonstige\" = \"grey\",\r\n      \"SPD\" = \"#E4000F\",\r\n      \"Die Linke\" = \"#E90098\"\r\n    )\r\n  ) +\r\n  geom_text(# place amounts inside the pie\r\n    aes(\r\n      x = 0.7 * sin(mid_angle),\r\n      y = 0.7 * cos(mid_angle),\r\n      label = perc_votes_SH,\r\n      color = parties_SH\r\n    )) + scale_color_manual(values = c(\"black\", \"white\", \"black\", \"black\", \"black\", \"black\", \"black\")) +\r\n  theme(legend.position = \"none\") +\r\n  geom_text(# place party name outside the pie\r\n    aes(\r\n      x = 1.05 * sin(mid_angle),\r\n      y = 1.05 * cos(mid_angle),\r\n      label = parties_SH,\r\n      hjust = hjust,\r\n      vjust = vjust,\r\n    )) +\r\n  coord_fixed(xlim = c(-1.8, 1.3)) -> P_SH\r\n\r\n#16 Thüringen\r\nggplot(pie_data_TH) +\r\n  aes(\r\n    x0 = 0,\r\n    y0 = 0,\r\n    r0 = 0.4,\r\n    r = 1,\r\n    start = start_angle,\r\n    end = end_angle,\r\n    fill = parties_TH\r\n  ) +\r\n  labs(title = \"Stimmenverteilung Thüringen\") +\r\n  theme_void() +\r\n  geom_arc_bar() +\r\n  scale_fill_manual(\r\n    values = c(\r\n      \"CDU\" = \"#0C0C0C\",\r\n      \"AFD\" = \"#009DE0\",\r\n      \"Grüne\" = \"#65A22C\",\r\n      \"FDP\" = \"#FEED01\",\r\n      \"Sonstige\" = \"grey\",\r\n      \"SPD\" = \"#E4000F\",\r\n      \"Die Linke\" = \"#E90098\"\r\n    )\r\n  ) +\r\n  geom_text(# place amounts inside the pie\r\n    aes(\r\n      x = 0.7 * sin(mid_angle),\r\n      y = 0.7 * cos(mid_angle),\r\n      label = perc_votes_TH,\r\n      color = parties_TH\r\n    )) + scale_color_manual(values = c(\"black\", \"white\", \"black\", \"black\", \"black\", \"black\", \"black\")) +\r\n  theme(legend.position = \"none\") +\r\n  geom_text(# place party name outside the pie\r\n    aes(\r\n      x = 1.05 * sin(mid_angle),\r\n      y = 1.05 * cos(mid_angle),\r\n      label = parties_TH,\r\n      hjust = hjust,\r\n      vjust = vjust,\r\n    )) +\r\n  coord_fixed(xlim = c(-1.8, 1.3)) -> P_TH\r\n\r\n\r\n\r\nAdd transparent background\r\n\r\nShow code\r\n#1 Baden-Würtemberg\r\nP_BW <- P_BW +\r\n  theme(\r\n    panel.background = element_rect(fill = \"transparent\"),\r\n    # bg of the panel\r\n    plot.background = element_rect(fill = \"transparent\", color = NA),\r\n    # bg of the plot\r\n    panel.grid.major = element_blank(),\r\n    # get rid of major grid\r\n    panel.grid.minor = element_blank(),\r\n    # get rid of minor grid\r\n    legend.background = element_rect(fill = \"transparent\"),\r\n    # get rid of legend bg\r\n    legend.box.background = element_rect(fill = \"transparent\") # get rid of legend panel bg\r\n  )\r\nP_BW\r\n\r\n\r\nShow code\r\n#2 Bayern\r\nP_BA <- P_BA +\r\n  theme(\r\n    panel.background = element_rect(fill = \"transparent\"),\r\n    # bg of the panel\r\n    plot.background = element_rect(fill = \"transparent\", color = NA),\r\n    # bg of the plot\r\n    panel.grid.major = element_blank(),\r\n    # get rid of major grid\r\n    panel.grid.minor = element_blank(),\r\n    # get rid of minor grid\r\n    legend.background = element_rect(fill = \"transparent\"),\r\n    # get rid of legend bg\r\n    legend.box.background = element_rect(fill = \"transparent\") # get rid of legend panel bg\r\n  )\r\nP_BA\r\n\r\n\r\nShow code\r\n#3 Berlin\r\nP_BE <- P_BE +\r\n  theme(\r\n    panel.background = element_rect(fill = \"transparent\"),\r\n    # bg of the panel\r\n    plot.background = element_rect(fill = \"transparent\", color = NA),\r\n    # bg of the plot\r\n    panel.grid.major = element_blank(),\r\n    # get rid of major grid\r\n    panel.grid.minor = element_blank(),\r\n    # get rid of minor grid\r\n    legend.background = element_rect(fill = \"transparent\"),\r\n    # get rid of legend bg\r\n    legend.box.background = element_rect(fill = \"transparent\") # get rid of legend panel bg\r\n  )\r\nP_BE\r\n\r\n\r\nShow code\r\n#4 Brandenburg\r\nP_BRA <- P_BRA +\r\n  theme(\r\n    panel.background = element_rect(fill = \"transparent\"),\r\n    # bg of the panel\r\n    plot.background = element_rect(fill = \"transparent\", color = NA),\r\n    # bg of the plot\r\n    panel.grid.major = element_blank(),\r\n    # get rid of major grid\r\n    panel.grid.minor = element_blank(),\r\n    # get rid of minor grid\r\n    legend.background = element_rect(fill = \"transparent\"),\r\n    # get rid of legend bg\r\n    legend.box.background = element_rect(fill = \"transparent\") # get rid of legend panel bg\r\n  )\r\nP_BRA\r\n\r\n\r\nShow code\r\n#5 Bremen\r\nP_BRE <- P_BRE +\r\n  theme(\r\n    panel.background = element_rect(fill = \"transparent\"),\r\n    # bg of the panel\r\n    plot.background = element_rect(fill = \"transparent\", color = NA),\r\n    # bg of the plot\r\n    panel.grid.major = element_blank(),\r\n    # get rid of major grid\r\n    panel.grid.minor = element_blank(),\r\n    # get rid of minor grid\r\n    legend.background = element_rect(fill = \"transparent\"),\r\n    # get rid of legend bg\r\n    legend.box.background = element_rect(fill = \"transparent\") # get rid of legend panel bg\r\n  )\r\nP_BRE\r\n\r\n\r\nShow code\r\n#6 Hambrug\r\nP_HA <- P_HA +\r\n  theme(\r\n    panel.background = element_rect(fill = \"transparent\"),\r\n    # bg of the panel\r\n    plot.background = element_rect(fill = \"transparent\", color = NA),\r\n    # bg of the plot\r\n    panel.grid.major = element_blank(),\r\n    # get rid of major grid\r\n    panel.grid.minor = element_blank(),\r\n    # get rid of minor grid\r\n    legend.background = element_rect(fill = \"transparent\"),\r\n    # get rid of legend bg\r\n    legend.box.background = element_rect(fill = \"transparent\") # get rid of legend panel bg\r\n  )\r\nP_HA\r\n\r\n\r\nShow code\r\n#7 Hessen\r\nP_HE <- P_HE +\r\n  theme(\r\n    panel.background = element_rect(fill = \"transparent\"),\r\n    # bg of the panel\r\n    plot.background = element_rect(fill = \"transparent\", color = NA),\r\n    # bg of the plot\r\n    panel.grid.major = element_blank(),\r\n    # get rid of major grid\r\n    panel.grid.minor = element_blank(),\r\n    # get rid of minor grid\r\n    legend.background = element_rect(fill = \"transparent\"),\r\n    # get rid of legend bg\r\n    legend.box.background = element_rect(fill = \"transparent\") # get rid of legend panel bg\r\n  )\r\nP_HE\r\n\r\n\r\nShow code\r\n#8 Mecklenburg-Vorpommern\r\nP_MV <- P_MV +\r\n  theme(\r\n    panel.background = element_rect(fill = \"transparent\"),\r\n    # bg of the panel\r\n    plot.background = element_rect(fill = \"transparent\", color = NA),\r\n    # bg of the plot\r\n    panel.grid.major = element_blank(),\r\n    # get rid of major grid\r\n    panel.grid.minor = element_blank(),\r\n    # get rid of minor grid\r\n    legend.background = element_rect(fill = \"transparent\"),\r\n    # get rid of legend bg\r\n    legend.box.background = element_rect(fill = \"transparent\") # get rid of legend panel bg\r\n  )\r\nP_MV\r\n\r\n\r\nShow code\r\n#9 Niedersachsen\r\nP_NS <- P_NS +\r\n  theme(\r\n    panel.background = element_rect(fill = \"transparent\"),\r\n    # bg of the panel\r\n    plot.background = element_rect(fill = \"transparent\", color = NA),\r\n    # bg of the plot\r\n    panel.grid.major = element_blank(),\r\n    # get rid of major grid\r\n    panel.grid.minor = element_blank(),\r\n    # get rid of minor grid\r\n    legend.background = element_rect(fill = \"transparent\"),\r\n    # get rid of legend bg\r\n    legend.box.background = element_rect(fill = \"transparent\") # get rid of legend panel bg\r\n  )\r\nP_NS\r\n\r\n\r\nShow code\r\n#10 Nordrhein-Westfalen\r\nP_NRW <- P_NRW +\r\n  theme(\r\n    panel.background = element_rect(fill = \"transparent\"),\r\n    # bg of the panel\r\n    plot.background = element_rect(fill = \"transparent\", color = NA),\r\n    # bg of the plot\r\n    panel.grid.major = element_blank(),\r\n    # get rid of major grid\r\n    panel.grid.minor = element_blank(),\r\n    # get rid of minor grid\r\n    legend.background = element_rect(fill = \"transparent\"),\r\n    # get rid of legend bg\r\n    legend.box.background = element_rect(fill = \"transparent\") # get rid of legend panel bg\r\n  )\r\nP_NRW\r\n\r\n\r\nShow code\r\n#11 Rheinland-Pfalz\r\nP_RP <- P_RP +\r\n  theme(\r\n    panel.background = element_rect(fill = \"transparent\"),\r\n    # bg of the panel\r\n    plot.background = element_rect(fill = \"transparent\", color = NA),\r\n    # bg of the plot\r\n    panel.grid.major = element_blank(),\r\n    # get rid of major grid\r\n    panel.grid.minor = element_blank(),\r\n    # get rid of minor grid\r\n    legend.background = element_rect(fill = \"transparent\"),\r\n    # get rid of legend bg\r\n    legend.box.background = element_rect(fill = \"transparent\") # get rid of legend panel bg\r\n  )\r\nP_RP\r\n\r\n\r\nShow code\r\n#12 Saarland\r\nP_SL <- P_SL +\r\n  theme(\r\n    panel.background = element_rect(fill = \"transparent\"),\r\n    # bg of the panel\r\n    plot.background = element_rect(fill = \"transparent\", color = NA),\r\n    # bg of the plot\r\n    panel.grid.major = element_blank(),\r\n    # get rid of major grid\r\n    panel.grid.minor = element_blank(),\r\n    # get rid of minor grid\r\n    legend.background = element_rect(fill = \"transparent\"),\r\n    # get rid of legend bg\r\n    legend.box.background = element_rect(fill = \"transparent\") # get rid of legend panel bg\r\n  )\r\nP_SL\r\n\r\n\r\nShow code\r\n#13 Sachsen\r\nP_SAC <- P_SAC +\r\n  theme(\r\n    panel.background = element_rect(fill = \"transparent\"),\r\n    # bg of the panel\r\n    plot.background = element_rect(fill = \"transparent\", color = NA),\r\n    # bg of the plot\r\n    panel.grid.major = element_blank(),\r\n    # get rid of major grid\r\n    panel.grid.minor = element_blank(),\r\n    # get rid of minor grid\r\n    legend.background = element_rect(fill = \"transparent\"),\r\n    # get rid of legend bg\r\n    legend.box.background = element_rect(fill = \"transparent\") # get rid of legend panel bg\r\n  )\r\nP_SAC\r\n\r\n\r\nShow code\r\n#14 Sachsen-Anhalt\r\nP_SAA <- P_SAA +\r\n  theme(\r\n    panel.background = element_rect(fill = \"transparent\"),\r\n    # bg of the panel\r\n    plot.background = element_rect(fill = \"transparent\", color = NA),\r\n    # bg of the plot\r\n    panel.grid.major = element_blank(),\r\n    # get rid of major grid\r\n    panel.grid.minor = element_blank(),\r\n    # get rid of minor grid\r\n    legend.background = element_rect(fill = \"transparent\"),\r\n    # get rid of legend bg\r\n    legend.box.background = element_rect(fill = \"transparent\") # get rid of legend panel bg\r\n  )\r\nP_SAA\r\n\r\n\r\nShow code\r\n#15 Schleswig-Holstein\r\nP_SH <- P_SH +\r\n  theme(\r\n    panel.background = element_rect(fill = \"transparent\"),\r\n    # bg of the panel\r\n    plot.background = element_rect(fill = \"transparent\", color = NA),\r\n    # bg of the plot\r\n    panel.grid.major = element_blank(),\r\n    # get rid of major grid\r\n    panel.grid.minor = element_blank(),\r\n    # get rid of minor grid\r\n    legend.background = element_rect(fill = \"transparent\"),\r\n    # get rid of legend bg\r\n    legend.box.background = element_rect(fill = \"transparent\") # get rid of legend panel bg\r\n  )\r\nP_SH\r\n\r\n\r\nShow code\r\n#16 Thüringen\r\nP_TH <- P_TH +\r\n  theme(\r\n    panel.background = element_rect(fill = \"transparent\"),\r\n    # bg of the panel\r\n    plot.background = element_rect(fill = \"transparent\", color = NA),\r\n    # bg of the plot\r\n    panel.grid.major = element_blank(),\r\n    # get rid of major grid\r\n    panel.grid.minor = element_blank(),\r\n    # get rid of minor grid\r\n    legend.background = element_rect(fill = \"transparent\"),\r\n    # get rid of legend bg\r\n    legend.box.background = element_rect(fill = \"transparent\") # get rid of legend panel bg\r\n  )\r\nP_TH\r\n\r\n\r\n\r\n\r\nVisualise results\r\nVisualisierung Bundestagswahlen 2017\r\n\r\n\r\n",
      "last_modified": "2021-06-15T21:04:20+02:00"
    },
    {
      "path": "index.html",
      "title": "RJ's Distill Website",
      "description": "Welcome to this collection of my Homework from the Infovis SS2021 seminar. I hope that you can find something that will help you with your own homework.\n",
      "author": [],
      "contents": "\r\nSocial’s\r\nGithub / Twitter / LinkedIn\r\n\r\n\r\n\r\n",
      "last_modified": "2021-06-15T21:04:20+02:00"
    }
  ],
  "collections": []
}
